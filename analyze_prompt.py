# 대화 히스토리를 turn-by-turn으로 정리하고, 병명 추론용 GPT 프롬프트 생성
def build_gpt_prompt_from_chat_history(chat_history, disease_info_text):
    turn_text = []
    turn_num = 1
    for msg in chat_history:
        if msg["role"] == "user":
            turn_text.append(f"턴 {turn_num}: 신고자: {msg['content']}")
            turn_num += 1
        elif msg["role"] == "assistant":
            turn_text.append(f"턴 {turn_num}: 119: {msg['content']}")
            turn_num += 1
    turn_by_turn_text = "\n".join(turn_text)
    return f"""
아래는 신고자와 에이전트 간의 실제 대화 내용이다.
현재까지 언급된 증상을 바탕으로 가능한 병명을 판단하라.

[조건]
- 반드시 질병-증상 매핑 정보 내에서만 병명을 선택할 것
- 현재까지 발화된 증상만 고려할 것
- 병명을 확정하려면 해당 병명에 특이적이고 결정적인 증상이 명확히 확인되어야만 한다.
- 증상이 너무 모호하거나 공통적인 경우에는 **병명 후보 개수를 5개 이하로 제한**한다.
- 병명 후보는 **가장 가능성이 높은 것들만** 선택하라.
- 의식 소실, 쓰러짐처럼 여러 병명에 공통적인 증상만으로는 병명을 확정하지 말 것.
- 환자의 병명이 하나로 확정 가능하면 병명과 응급도를 명확히 제시할 것
- 하나로 확정 불가능 하다면 병명 후보를 나열하되, 질문은 하지 말 것
- ***분석 결과 출력 포맷을 반드시 지킬 것***

단, 병명이 하나로 확정되지 않은 경우(진행중 상태)에는 '응급도'를 절대 출력하지 말 것.

## 대화 내용
{turn_by_turn_text}

## 질병-증상 매핑 데이터
{disease_info_text}

==> 분석 결과 출력 포맷:
- 상태: 확정 or 진행중
- 누적 증상: [증상1, 증상2, ...]
- 병명 후보: ...
- 응급도: **병명이 확정된 경우에만 출력할 것!**
""".strip()



def build_final_diagnosis_prompt(confirmed_symptoms, disease_text):
    symptom_list = ", ".join(confirmed_symptoms)
    return f"""
현재까지 확인된 환자의 증상을 바탕으로 가능한 병명을 판단하라.

[조건]
- 반드시 아래의 '후보 병명-증상 데이터' 정보 내에서만 병명을 선택할 것
- 현재까지 확인된 환자의 증상만 고려할 것
- 병명을 확정하려면 해당 병명에 특이적이고 결정적인 증상이 명확히 확인되어야 함
- '의식 소실', '쓰러짐'처럼 여러 병명에 공통적인 증상만으로는 병명을 확정하지 말 것
- 아래 **누적 증상**은 이미 확인된 증상이다. 그대로 사용하라. 새로 판단하지 말 것.
- 환자의 병명이 하나로 확정 가능하면 병명과 응급도를 명확히 제시할 것
- 병명이 하나로 확정 불가능한 경우, 병명 후보만 나열하되 **절대 질문을 하지 말 것**
- 분석 결과 출력 포맷을 반드시 지킬 것
- 반드시 '누적 증상'은 [증상1, 증상2] 형태로 출력하라.

단, 병명이 확정되지 않은 경우(진행중 상태)에는 '응급도'를 절대 출력하지 말 것

## 누적 증상(이미 확인된 증상 목록)
{symptom_list}

## 후보 병명-증상 데이터
{disease_text}

==> 분석 결과 출력 포맷:
- 상태: 확정 or 진행중
- 누적 증상: [**위에서 제공한 누적 증상 그대로 작성할 것**]
- 병명 후보: 
- 응급도: 병명이 확정된 경우에만 출력할 것!
""".strip()